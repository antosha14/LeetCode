`

ПОПАПЫ ПОПАПЫ ПОПАПЫ ПОПАПЫ ПОПАПЫ ПОПАПЫ ПОПАПЫ ПОПАПЫ ПОПАПЫ ПОПАПЫ ПОПАПЫ 

Открыть что-то в другой вкладке (Попап)
window.open('https://javascript.info/')

Всплывающее окно блокируется в том случае, если вызов window.open произошёл не в результате действия посетителя (например, события onclick).

window.open(url, name, params)
params - Строка параметров для нового окна. Содержит настройки, разделённые запятыми. Важно помнить, что в данной строке не должно быть пробелов. Например width=200,height=100

Панели окна:
menubar (yes/no) – позволяет отобразить или скрыть меню браузера в новом окне.
toolbar (yes/no) – позволяет отобразить или скрыть панель навигации браузера (кнопки вперёд, назад, перезагрузки страницы) нового окна.
location (yes/no) – позволяет отобразить или скрыть адресную строку нового окна. Firefox и IE не позволяют скрывать эту панель по умолчанию.
status (yes/no) – позволяет отобразить или скрыть строку состояния. Как и с адресной строкой, большинство браузеров будут принудительно показывать её.
resizable (yes/no) – позволяет отключить возможность изменения размера нового окна. Не рекомендуется.
scrollbars (yes/no) – позволяет отключить полосы прокрутки для нового окна. Не рекомендуется.


Вызов open возвращает ссылку на новое окно. Эта ссылка может быть использована для управления свойствами окна, например, изменения положения
let newWin = window.open("about:blank", "hello", "width=200,height=200");

newWin.document.write("Hello, world!");
Попап также может обратиться к открывшему его окну по ссылке window.opener. Она равна null для всех окон, кроме попапов
Чтобы закрыть окно: win.close()
Для проверки, закрыто ли окно: win.closed

win.moveBy(x,y)
Переместить окно относительно текущей позиции на x пикселей вправо и y пикселей вниз. Допустимы отрицательные значения (для перемещения окна влево и вверх).
win.moveTo(x,y)
Переместить окно на координаты экрана (x,y).
win.resizeBy(width,height)
Изменить размер окна на указанные значения width/height относительно текущего размера. Допустимы отрицательные значения.
win.resizeTo(width,height)
Изменить размер окна до указанных значений.

Всплывающие окна используются нечасто. Ведь загрузить новую информацию можно динамически, а показать – в элементе <div>, расположенным над страницей (z-index). Ещё одна альтернатива – тег <iframe>.

Если мы открываем попап, хорошей практикой будет предупредить пользователя об этом. Иконка открывающегося окошка на ссылке поможет посетителю понять, что происходит и не потерять оба окна из поля зрения.

Новое окно можно открыть с помощью вызова open(url, name, params). Этот метод возвращает ссылку на это новое окно.
По умолчанию браузеры блокируют вызовы open, выполненные не в результате действий пользователя. Обычно браузеры показывают предупреждение, так что пользователь всё-таки может разрешить вызов этого метода.
Вместо попапа открывается вкладка, если в вызове open не указаны его размеры.
У попапа есть доступ к породившему его окну через свойство window.opener.
Если основное окно и попап имеют один домен и протокол, то они свободно могут читать и изменять друг друга. В противном случае, они могут только изменять положение друг друга и взаимодействовать с помощью сообщений.
Чтобы закрыть попап: метод close(). Также попап может закрыть и пользователь (как и любое другое окно). После закрытия окна свойство window.closed имеет значение true.

Методы focus() и blur() позволяют установить или убрать фокус с попапа. Но работают не всегда.
События focus и blur позволяют отследить получение и потерю фокуса новым окном. Но, пожалуйста, не забывайте, что окно может остаться видимым и после blur.

Внутри <iframe> находится по сути отдельное окно с собственными объектами document и window
Мы можем обращаться к ним, используя свойства:
iframe.contentWindow ссылка на объект window внутри <iframe>.
iframe.contentDocument – ссылка на объект document внутри <iframe>, короткая запись для iframe.contentWindow.document

iframe sandbox="allow-scripts allow-forms"

Защита от взлома с помощью iframe - сделать невидимую обёртку перехватывающую все клики и если window == top то обёртку убираем
Заголовок с сервера X-Frame-Options: SAMEORIGIN

Атака сlickjacking – это способ хитростью «заставить» пользователей кликнуть на сайте-жертве, без понимания, что происходит. Она опасна, если по клику могут быть произведены важные действия.

Хакер может разместить ссылку на свою вредоносную страницу в сообщении или найти другие способы, как заманить пользователей. Вариантов множество.

С одной стороны — эта атака «неглубокая», ведь хакер перехватывает только один клик. Но с другой стороны, если хакер знает, что после этого клика появятся другие элементы управления, то он может хитростью заставить пользователя кликнуть на них.

Этот вид атаки довольно опасен, ведь при разработке интерфейсов мы не предполагаем, что хакер может кликнуть от имени пользователя. Поэтому уязвимости могут быть обнаружены в совершенно неожиданных местах.

Для защиты от этой атаки рекомендуется использовать X-Frame-Options: SAMEORIGIN на страницах или даже целиком сайтах, которые не предназначены для просмотра во фрейме.
Или, если мы хотим разрешить отображение страницы во фрейме и при этом оставаться в безопасности, то можно использовать перекрывающий блок <div>.

Если сайт, такой как Facebook, при установке авторизующего куки ставит атрибут samesite:

Set-Cookie: authorization=secret; samesite
… Тогда такие куки не будут отправляться, когда Facebook будет открыт в ифрейме с другого сайта. Так что атака не удастся.

так мы можем заменить домен документа чтобы считались имеющими один и тот же domen peter.site.com john.site.com
document.domain = 'site.com';
Документ в iframe находится не сразу

ПОЛУЧИТЬ iframe можно через 
Другой способ получить объект window из <iframe> – забрать его из именованной коллекции window.frames:

По номеру: window.frames[0] – объект window для первого фрейма в документе.
По имени: window.frames.iframeName – объект window для фрейма со свойством name="iframeName".

window.frames – коллекция «дочерних» window (для вложенных фреймов).
window.parent – ссылка на «родительский» (внешний) window.
window.top – ссылка на самого верхнего родителя

Интерфейс postMessage позволяет окнам общаться между собой независимо от их происхождения.

Это способ обойти политику «Одинакового источника». Он позволяет обмениваться информацией, скажем john-smith.com и gmail.com, но только в том случае, если оба сайта согласны и вызывают соответствующие JavaScript-функции. Это делает общение безопасным для пользователя.

Чтобы получать сообщения, окно-получатель должно иметь обработчик события message (сообщение). Оно срабатывает, когда был вызван метод postMessage (и проверка targetOrigin пройдена успешно).

Чтобы вызвать метод или получить содержимое из другого окна, нам, во-первых, необходимо иметь ссылку на него.

Для всплывающих окон (попапов) доступны ссылки в обе стороны:

При открытии окна: window.open открывает новое окно и возвращает ссылку на него,
Изнутри открытого окна: window.opener – ссылка на открывающее окно.
Для ифреймов мы можем иметь доступ к родителям/потомкам, используя:

window.frames – коллекция объектов window вложенных ифреймов,
window.parent, window.top – это ссылки на родительское окно и окно самого верхнего уровня,
iframe.contentWindow – это объект window внутри тега <iframe>.
Если окна имеют одинаковый источник (протокол, домен, порт), то они могут делать друг с другом всё, что угодно.

В противном случае возможны только следующие действия:

Изменение свойства location другого окна (доступ только на запись).
Отправить туда сообщение.
Исключения:

Окна, которые имеют общий домен второго уровня: a.site.com и b.site.com. Установка свойства document.domain='site.com' в обоих окнах переведёт их в состояние «Одинакового источника».
Если у ифрейма установлен атрибут sandbox, это принудительно переведёт окна в состояние «разных источников», если не установить в атрибут значение allow-same-origin. Это можно использовать для запуска ненадёжного кода в ифрейме с того же сайта.
Метод postMessage позволяет общаться двум окнам с любыми источниками:

Отправитель вызывает targetWin.postMessage(data, targetOrigin).

Если targetOrigin не '*', тогда браузер проверяет имеет ли targetWin источник targetOrigin.

Если это так, тогда targetWin вызывает событие message со специальными свойствами:

origin – источник окна отправителя (например, http://my.site.com)
source – ссылка на окно отправитель.
data – данные, может быть объектом везде, кроме IE (в IE только строки).
В окне-получателе следует добавить обработчик для этого события с помощью метода addEventListener.
`
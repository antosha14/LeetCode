`
ЗАМЫКАНИЕ
Если переменная объявлена внутри блока кода {...}, то она видна только внутри этого блока
С помощью блоков {...} мы можем изолировать часть кода, выполняющую свою собственную задачу, с переменными, принадлежащими только ей
Для if, for, while и т.д. переменные, объявленные в блоке кода {...}, также видны только внутри:
`
`
В JavaScript у каждой выполняемой функции, блока кода {...} и скрипта есть связанный с ними внутренний (скрытый) объект, называемый лексическим окружением LexicalEnvironment.
Объект лексического окружения состоит из двух частей:

Environment Record – объект, в котором как свойства хранятся все локальные переменные (а также некоторая другая информация, такая как значение this).

Ссылка на внешнее лексическое окружение – то есть то, которое соответствует коду снаружи (снаружи от текущих фигурных скобок).
"Переменная" – это просто свойство специального внутреннего объекта: Environment Record. «Получить или изменить переменную», означает, «получить или изменить свойство этого объекта»
Переменная – это свойство специального внутреннего объекта, связанного с текущим выполняющимся блоком/функцией/скриптом.
Работа с переменными – это на самом деле работа со свойствами этого объекта.
Функция – это тоже значение, как и переменная.

Разница заключается в том, что Function Declaration мгновенно инициализируется полностью.
Когда запускается функция, в начале ее вызова автоматически создается новое лексическое окружение для хранения локальных переменных и параметров вызова.
Все функции помнят лексическое окружение, в котором они были созданы. Технически здесь нет никакой магии: все функции имеют скрытое свойство [[Environment]], которое хранит ссылку на лексическое окружение, в котором была создана функция
Ссылка на [[Environment]] устанавливается один раз и навсегда при создании функции.
Переменная обновляется в том лексическом окружении, в котором она существует.
Замыкание – это функция, которая запоминает свои внешние переменные и может получить к ним доступ. Все функции в JS это замыкания. Формально при создании функции у функции есть спеец свойство ENV в котором и хранится ссылка на окружение, где она была создана
Обычно лексическое окружение удаляется из памяти вместе со всеми переменными после завершения вызова функции

БАГ V8
function f() {
  let value = Math.random();

  function g() {
    debugger; // в консоли: напишите alert(value); Такой переменной нет!
  }

  return g;
}

let g = f();
g();
`

`
ПОКАЖЕТ PETE то есть последнее доступноее значение лексического окружения
let name = "John";

function sayHi() {
  alert("Hi, " + name);
}

name = "Pete";

sayHi(); // что будет показано: "John" или "Pete"?
`

`
function sum(a) {

  return function(b) {
    return a + b; // берёт "a" из внешнего лексического окружения
  };

}

alert( sum(1)(2) ); // 3
alert( sum(5)(-1) ); // 4
`

`
let x = 1;

function func() {
  // локальная переменная x известна движку с самого начала выполнения функции,
  // но она является неинициализированной до let ("мёртвая зона")
  // следовательно, ошибка
  console.log(x); // ReferenceError: Cannot access 'x' before initialization
  let x = 2;
}

func();
`


`
Максимальная глубина рекурсии ограничена движком JavaScript. Точно можно рассчитывать на 10000
Информация о процессе выполнения запущенной функции хранится в её контексте выполнения (execution context).
Контекст выполнения – специальная внутренняя структура данных, которая содержит информацию о вызове функции. Она включает в себя конкретное место в коде, на котором находится интерпретатор, локальные переменные функции, значение this (мы не используем его в данном примере) и прочую служебную информацию.
Один вызов функции имеет ровно один контекст выполнения, связанный с ним
Выполнение текущей функции приостанавливается.
Контекст выполнения, связанный с ней, запоминается в специальной структуре данных – стеке контекстов выполнения.
Выполняются вложенные вызовы, для каждого из которых создаётся свой контекст выполнения.
После их завершения старый контекст достаётся из стека, и выполнение внешней функции возобновляется с того места, где она была остановлена.

Текущий контекст «запоминается» на вершине стека.
Создаётся новый контекст для вложенного вызова.
Когда выполнение вложенного вызова заканчивается – контекст предыдущего вызова восстанавливается, и выполнение соответствующей функции продолжается.

СВЯЗАННЫЙ СПИСОК, элемент хранит данные только о следующем соответственно переиндексация не дорогая
Элемент связанного списка определяется рекурсивно как объект с:
value,
next – свойство, ссылающееся на следующий элемент связанного списка или null, если это последний элемент.
let list = {
  value: 1,
  next: {
    value: 2,
    next: {
      value: 3,
      next: {
        value: 4,
        next: null
      }
    }
  }
};
`

`
Но между Array.from(obj) и [...obj] есть разница:

Array.from работает как с псевдомассивами, так и с итерируемыми объектами
Оператор расширения работает только с итерируемыми объектами
`

`
В JavaScript функции – это объекты
У функций как и у объектов есть свойства например свойство name
function sayHi() {
  alert("Hi");
}

alert(sayHi.name); // sayHi
если функция не имеет name, то JavaScript пытается определить его из контекста
Ещё одно встроенное свойство «length» содержит количество параметров функции в её объявлении.
Троеточие, обозначающее «остаточные параметры», здесь как бы «не считается»
`

`
На функции тоже можно задавать свойства
function sayHi() {
  alert("Hi");

  // давайте посчитаем, сколько вызовов мы сделали
  sayHi.counter++;
}
Свойство не есть переменная
Свойство функции, назначенное как sayHi.counter = 0, не объявляет локальную переменную counter внутри неё. Другими словами, свойство counter и переменная let counter – это две независимые вещи.

Мы можем использовать функцию как объект, хранить в ней свойства, но они никак не влияют на её выполнение. Переменные – это не свойства функции и наоборот. Это два параллельных мира.
`

`
NFE Named Function expression
let sayHi = function func(who) {
  alert(Hello, ${who});
};
Есть две важные особенности имени func, ради которого оно даётся:

Оно позволяет функции ссылаться на себя же.
Оно не доступно за пределами функции.
Нужно для того, чтобы всё работало даже если имя переменной изменится
let sayHi = function(who) {
  if (who) {
    alert(Hello, ${who});
  } else {
    sayHi("Guest"); // Ошибка: sayHi не является функцией
  }
};

let welcome = sayHi;
sayHi = null;

welcome(); // Ошибка, вложенный вызов sayHi больше не работает!
`

`
let sayHi = new Function('alert("Hello")');
функция создаётся полностью «на лету» из строки, переданной во время выполнения.
когда функция создаётся с использованием new Function, в её [[Environment]] записывается ссылка не на внешнее лексическое окружение, в котором она была создана, а на глобальное. Поэтому такая функция имеет доступ только к глобальным переменным.
`

let timerId = setTimeout(func|code, [delay], [arg1], [arg2]);
`
Вызов setTimeout возвращает «идентификатор таймера» timerId, который можно использовать для отмены дальнейшего выполнения.
let timerId = setTimeout(...);
clearTimeout(timerId);
`
let timerId2 = setInterval(func|code, [delay], [arg1], [arg2] );
//Для setInterval функция остаётся в памяти до тех пор, пока не будет вызван clearInterval

`
Особый вариант использования: setTimeout(func, 0) или просто setTimeout(func).

Это планирует вызов func настолько быстро, насколько это возможно. Но планировщик будет вызывать функцию только после завершения выполнения текущего кода.
setTimeout(() => alert("Мир"));
alert("Привет");
Любой вызов setTimeout будет выполнен только после того, как текущий код завершится.
`
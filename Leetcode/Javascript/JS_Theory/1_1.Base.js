//Программы на JavaScript могут быть вставлены в любое место HTML-документа с помощью тега <script>
`  <script>
    alert( 'Привет, мир!' );
  </script>`

//Можем добавить src
`<script src="/path/to/script.js"></script>`
`Как правило, только простейшие скрипты помещаются в HTML. 
Более сложные выделяются в отдельные файлы.
Польза отдельных файлов в том, что браузер загрузит скрипт отдельно и сможет хранить его в кеше.`
`Если атрибут src установлен, содержимое тега script будет игнорироваться.`


`В большинстве случаев новая строка подразумевает точку с запятой. Но «в большинстве случаев» не значит «всегда»!`

`Код ниже выдаст первый алерт, а потом ошибку, потому что js не ставит ; перед квадратными скобками [...]
alert('Hello')

[1, 2].forEach(alert);`

/* Пример многосторочного комментария
Это - многострочный комментарий.
*/


`alert("some code");
// "use strict" ниже игнорируется - он должен быть в первой строке

"use strict";

// строгий режим не активирован`


`Можно объявлять несколько переменных в одной строке 
let user = 'John', age = 25, message = 'Hello';
`

`Повторное объявление той же переменной является ошибкой:`
`typeof(5)`

`
typeof 50 + " Квартир"; // Выведет "number Квартир"
typeof (50 + " Квартир"); // Выведет "string"
`
`
typeof null является "object"
`

`prompt(title, [default]); аналог input в python
Если пользователь нажмет отмена то null
`


`
Оператор «запятая» предоставляет нам возможность вычислять несколько выражений, разделяя их запятой ,. Каждое выражение выполняется, но возвращается результат только последнего.
let a = (1 + 2, 3 + 4);
alert( a ); // 7 (результат вычисления 3 + 4)

У запятой более низкий порядок даже чем у присваивания
a = 1 + 2, 3 + 4;
alert(a); // 3

// три операции в одной строке
for (a = 1, b = 3, c = a * b; a < 10; a++) {
 ...
}
`

`
ЧЕМ ДАЛЬШЕ ПО АЛФАВИТУ ТЕМ БОЛЬШЕ 
СРАВНИВАЮТСЯ UNICODE Символы поэтому строчная буква больше такой же заглавной
Алгоритм сравнения двух строк довольно прост:
Сначала сравниваются первые символы строк.
Если первый символ первой строки больше (меньше), чем первый символ второй, то первая строка больше (меньше) второй. Сравнение завершено.
Если первые символы равны, то таким же образом сравниваются уже вторые символы строк.
Сравнение продолжается, пока не закончится одна из строк.
Если обе строки заканчиваются одновременно, то они равны. Иначе, большей считается более длинная строка.
`

`
При сравнении значений разных типов JavaScript приводит каждое из них к числу.

Ситуация при которой конвертнутые разные значения равны между собой
let a = 0;
alert( Boolean(a) ); // false
let b = "0";
alert( Boolean(b) ); // true
alert(a == b); // true!
`

`
5 > 4 true
"ананас" > "яблоко" false
"2" > "12" true ПОТОМУ ЧТО СРАВНЕНИЕ НА СТРОКАХ НЕ КОНВЕРТИТ В ЧИСЛА
undefined == null true ПРИ ОБЫЧНОМ РАВНЫ ТОЛЬКО ДРУГ ДРУГУ
undefined === null false ПРИ СТРОГОМ НЕ РАВНЫ
null == "\n0\n" false
null === +"\n0\n" false
`

`
ИЛИ 
ИЛИ вернёт первый тру, или последний если все фолс (все преобразовываются в логические)
Значение возвращается в исходном виде, без преобразования.
ПОЛУЧЕНИЕ ПЕРВОГО ИСТИННОГО ЗНАЧЕНИЯ
СОКРАЩЕНИЕ ВЫЧИСЛЕНИЙ - еасли первый тру, то он сразу вернётся
a ||= b;
Вычисляет операнды слева направо.
Конвертирует a в логическое значение.
Если a ложно, присваивает a значение b.
`


`
И
Возвращает первое ложное значение. Или последнее, если ничего не найдено.
Приоритет оператора && больше, чем у ||
Принцип действия &&= практически такой же, как и у оператора логического присваивания ИЛИ ||=. Единственное отличие заключается в том, что &&= присвоит a значение b только в том случае, если a истинно.
Приоритет НЕ ! является наивысшим из всех логических операторов, поэтому он всегда выполняется первым, перед && или ||.
`

`
alert( alert(1) || 2 || alert(3) ); выведет 1 и 2 так как алерт не возвращает, а 2 вернётся
`

`
Оператор нулевого слияния (??) ВОЗВРАЩАЕТ ПЕРВОЕ ОПРЕДЕЛЁННОЕ ЗНАЧЕНИЕ
null и undefined - неопределено
если а определено то а если не определено то b
Как правило, оператор ?? нужен для того, чтобы задать значение по умолчанию для потенциально неопределённой переменной
let user;
alert(user ?? "Аноним"); // Аноним (user не существует)
Кроме этого, можно записать последовательность из операторов ??, чтобы получить первое значение из списка, которое не является null/undefined

Похож на или но отличие в том, что:
|| возвращает первое истинное значение. (не различает между null/undefined и пустой строкой, 0 и false)
?? возвращает первое определённое значение. (только null/undefined)
Приоритет оператора ?? такой же, как и у ||

let x = 1 && 2 ?? 3; // Синтаксическая ошибка
let x = (1 && 2) ?? 3; // Работает без ошибок
Проверяет равна ли переменная null/undefined и присваивает если она неопределена
x ??= y
Если первое null/undefined то вторая часть кода вообще не сработает
`

`
while (condition) {
  // код
  // также называемый "телом цикла"
}

ХОТЯ БЫ 1 РАЗ
do {
  // тело цикла
} while (condition);

for (начало; условие; шаг) {
  // ... тело цикла ...
}
Прерывание цикла: «break»
Переход к следующей итерации: continue
Нельзя использовать break/continue справа от оператора „?“
`

`
Если нужно выйти из внешнего циклаа во внутреннем используем метку (имя и двоеточие перед циклом)
break outer остановит именно внешний цикл
Метки также работают с contitue переходя к следующей итераации цикла с меткой
outer: for (let i = 0; i < 3; i++) {

  for (let j = 0; j < 3; j++) {

    let input = prompt(Значение на координатах (${i},${j}), '');

    // если пустая строка или Отмена, то выйти из обоих циклов
    if (!input) break outer; // (*)

    // сделать что-нибудь со значениями...
  }
}
`

`switch(x) {
  case 'value1':  // if (x === 'value1')
    ...
    [break]

  case 'value2':  // if (x === 'value2')
    ...
    [break]

  default:
    ...
    [break]
}`

`
Можно группировать несколько кейсов
  case 3: // (*) группируем оба case
  case 5:
    alert('Неправильно!');
    alert("Может вам посетить урок математики?");
    break;
`